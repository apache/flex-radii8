<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<s:Group xmlns:controls="com.flexcapacitor.graphics.*"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:filters="com.flexcapacitor.filters.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 
		 creationComplete="group1_creationCompleteHandler(event)" xmlns:controls1="com.flexcapacitor.controls.*" xmlns:handlers="com.flexcapacitor.handlers.*" xmlns:clipboard="com.flexcapacitor.effects.clipboard.*" xmlns:status="com.flexcapacitor.effects.status.*" 
		 >

	
	<fx:Script>
		<![CDATA[
			import com.flexcapacitor.controller.Radiate;
			import com.flexcapacitor.events.RadiateEvent;
			import com.flexcapacitor.tools.EyeDropper;
			import com.flexcapacitor.tools.ITool;
			import com.flexcapacitor.utils.DisplayObjectUtils;
			import com.flexcapacitor.utils.supportClasses.ComponentDescription;
			
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			
			public var radiate:Radiate;
			public var color:uint;
			public var tool:ITool;
			private var isOverDocument:Boolean;
			
			/**
			 * 
			 * */
			protected function group1_creationCompleteHandler(event:FlexEvent):void {
				radiate = Radiate.getInstance();
				
				radiate.addEventListener(RadiateEvent.COLOR_SELECTED, colorSelectedHandler, false, 0, true);
				radiate.addEventListener(RadiateEvent.COLOR_PREVIEW, colorPreviewHandler, false, 0, true);
				
				tool = radiate.selectedTool;
				
				EyeDropper(tool).addEventListener(MouseEvent.ROLL_OUT, rollOutHandler, false, 0, true);
				EyeDropper(tool).addEventListener(MouseEvent.ROLL_OVER, rollOverHandler, false, 0, true);
				//EyeDropper(tool).addEventListener(MouseEvent.MOUSE_MOVE, rollOverHandler, false, 0, true);
				
				//Radiate.log.info("INSPECTOR TOOL CREATED");
				
				updateTool(tool);
			}
			
			/**
			 * Update UI components to tool settings
			 * */
			public function updateTool(tool:ITool):void {
				var toolDescription:ComponentDescription = radiate.getToolDescription(tool);
				
				if (toolDescription && toolDescription.instance 
					&& toolDescription.instance is EyeDropper) {
					var eyeDropperTool:EyeDropper = EyeDropper(toolDescription.instance);
					//showSelection.selected = selectionTool.showSelection;
					//showLabel.selected = selectionTool.showSelectionLabel;
				}
			}
			
			/**
			 * When user clicks on a location apply the values
			 * */
			protected function colorSelectedHandler(event:RadiateEvent):void {
				//Radiate.log.info("COLOR CHANGE");
				
				updateDisplay(event.color, event.invalid, false);
			}
			
			/**
			 * When user previews a location (mouse movement) show in preview components
			 * */
			protected function colorPreviewHandler(event:RadiateEvent):void {
				//Radiate.log.info("COLOR PREVIEW");
				
				updateDisplay(event.color, event.invalid, true);
			}
			
			/**
			 * Updates UI
			 * */
			public function updateDisplay(color:uint, invalid:Boolean, preview:Boolean):void {
				
				if (preview) {
					if (invalid) {
						colorPickerPreview.selectedColor = 0;
					}
					else {
						colorPickerPreview.selectedColor = color;
						colorTextInputPreview.text = DisplayObjectUtils.getColorInHex(color, true);
					}
					
				}
				else {
					if (invalid) {
						colorPicker.selectedColor = 0;
					}
					else {
						colorPicker.selectedColor = color;
						colorTextInput.text = DisplayObjectUtils.getColorInHex(color, true);
					}
				}
			}
			
			
			protected function rollOutHandler(event:MouseEvent):void {
				colorPickerPreview.visible = false;
				colorTextInputPreview.visible = false;
				isOverDocument = false;
				
			}
			
			protected function rollOverHandler(event:MouseEvent):void {
				colorPickerPreview.visible = true;
				colorTextInputPreview.visible = true;
				isOverDocument = true;
			}
			
			/**
			 * 
			 * */
			protected function colorPicker_changeHandler(event:ColorPickerEvent):void {
				colorTextInputPreview.text = DisplayObjectUtils.getColorInHex(event.color, true);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
		<fx:Array id="selectFiltersOff">
			<filters:BlackAndWhiteFilter  />
		</fx:Array>
		
		<!-- COPY TO THE CLIPBOARD -->
		<handlers:EventHandler eventName="click" target="{copyIcon}" setTriggerEvent="true">
			
			<clipboard:CopyToClipboard data="{colorTextInput.text}" targetAncestor="{this}" allowNullData="true">
				<clipboard:successEffect>
					<status:ShowStatusMessage message="Color copied to the clipboard"/>
				</clipboard:successEffect>
				<clipboard:noDataEffect>
					<status:ShowStatusMessage message="Nothing to copy to the clipboard"/>
				</clipboard:noDataEffect>
				<clipboard:errorEffect>
					<status:ShowStatusMessage message="An error occurred while attempting to copy to the clipboard"/>
				</clipboard:errorEffect>
			</clipboard:CopyToClipboard>
			
		</handlers:EventHandler>
	</fx:Declarations>

	<s:layout>
		<s:HorizontalLayout paddingLeft="4" />
	</s:layout>
	
	<mx:ColorPicker id="colorPicker" height="21" change="colorPicker_changeHandler(event)"/>
	
	<s:TextInput id="colorTextInput" widthInChars="6" height="21"/>
	
	
	<controls1:ImageButton id="copyIcon" 
						   height="100%"
						   filters="{selectFiltersOff}"
						   toolTip="Copy the color to the Clipboard"
						   source="{Radii8LibraryAssets.copy}" 
						   includeInLayout="{colorTextInput.text!=''}"
						   />
	
	<mx:ColorPicker id="colorPickerPreview" visible="false" height="21"/>
	<s:TextInput id="colorTextInputPreview" visible="false" widthInChars="6" height="21"/>
	
</s:Group>
